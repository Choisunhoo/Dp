# baekjoon 9251 LCS(Longest Common Subsequence, 최장 공통 부분 수열)

# 공통 수열을 찾을 2개의 문자열을 입력
data_a = list(input())
data_b = list(input())
# 2개의 문자열의 각 길이를 저장
a = len(data_a)
b = len(data_b)

# 2개의 문자열보다 1개 더 많은 길이의 2차원 dp테이블을 생성
dp = [[0] * (b+1) for _ in range(a+1)]

# 다이나믹 프로그래밍을 시작
for i in range(1, a+1):
    for j in range(1, b+1):
        # 문자열이 같은 경우에 그 전 dp 테이블에서 1을 더해줌
        if data_a[i-1] == data_b[j-1]:
            dp[i][j] = dp[i-1][j-1] + 1
        #같지 않을 경우에는 지금까지 했던 최대값을 테이블에 저장
        else: 
            dp[i][j] = max(dp[i-1][j], dp[i][j-1])

#결과 출력
print(dp[-1][-1])
             

# 다이나믹 프로그래밍 알고리즘 baekjoon 11054 가장 긴 바이토닉 부분 수열

import sys 
input = sys.stdin.readline

# 수열에 들어갈 수의 갯수를 입력
N = int(input())
# 수열을 입력 
data = list(map(int, input().split()))

# 증가하는 부분 수열의 최대 값의 구하는 dp 테이블 생성
dp_increasing = [1]*N
# 감소하는 부분 수열의 최대 값의 구하는 dp 테이블 생성
dp_decreasing = [1]*N


# 증가하는 부분 수열의 값을 구하는 다이나믹 프로그래밍을 실행
for i in range(1, N):
    for j in range(i):
        # 정해진 번호와 그보다 낮은 수들을 비교해서 낮은수 + 1 과 정해진 번호를 비교하여 더욱 긴 수열을 저장
        if data[i] > data[j]:
            dp_increasing[i] = max(dp_increasing[i], dp_increasing[j]+1)

# 감소하는 부분 수열을 구하기 위해서 데이터를 뒤집어줌
data.reverse()

# 감소하는 부분 수열의 값을 구하는 다이나믹 프로그래밍을 실행
for i in range(N):        
    for j in range(i):
        # 정해진 번호와 그보다 낮은 수들을 비교해서 낮은수 + 1 과 정해진 번호를 비교하여 더욱 긴 수열을 저장
        if data[i] > data[j]:
            dp_decreasing[i] = max(dp_decreasing[i], dp_decreasing[j]+1)

# 감소하는 부분 수열을 위해 dp 테이블을 뒤집어줌
dp_decreasing.reverse()

# 수열의 최소값을 정해줌
result = 0

# 증가와 감소 하는 dp 테이블 두개의 합을 비교하며 가장긴 수열을 저장
for i in range(N):
    result = max(result, dp_increasing[i] + dp_decreasing[i])

# 2개의 dp테이블을 합한 값은 같은 수를 반복했기 때문에 1을 뺀 값은 결과로 출력
print(result -1)
